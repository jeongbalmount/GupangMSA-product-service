package GupangMSA.productservice.mock;

import GupangMSA.productservice.domain.Product;
import GupangMSA.productservice.exception.NoProductException;
import GupangMSA.productservice.infrastructure.ProductRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeProductRepository implements ProductRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Product> data = Collections.synchronizedList(new ArrayList<>());

    /*
    private final Long sellerId;
    private final String name;
    private final int price;
    private final String category;
    private final String description;
     */
    @Override
    public Product save(Product product) {
        if (product.getId() == null) {
            Product newProduct = Product.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .sellerId(product.getSellerId())
                    .name(product.getName())
                    .price(product.getPrice())
                    .category(product.getCategory())
                    .description(product.getDescription())
                    .build();
            data.add(newProduct);
            return newProduct;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), product.getId()));
            data.add(product);
            return product;
        }

    }

    @Override
    public List<Product> findBySellerId(Long sellerId) {
        List<Product> products = new ArrayList<>();
        for (Product product : data) {
            if (Objects.equals(product.getSellerId(), sellerId)) {
                products.add(product);
            }
        }
        return products;
    }

    @Override
    public void delete(Long id) {
        Optional<Product> optionalProduct = data.stream().filter(item -> Objects.equals(item.getId(), id)).findAny();
        Product product = optionalProduct.orElseThrow(() -> new NoProductException("no product error"));

        data.remove(product);
    }

    @Override
    public Optional<Product> findById(Long id) {
        return data.stream().filter(item ->
                Objects.equals(item.getId(), id)).findAny();
    }
}
